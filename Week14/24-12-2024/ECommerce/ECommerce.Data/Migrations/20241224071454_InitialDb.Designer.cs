// <auto-generated />
using System;
using ECommerce.Data.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ECommerce.Data.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20241224071454_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ECommerce.Entity.Concrete.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.BasketItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7122),
                            Description = "Elektronik ürünler",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elektronik"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7125),
                            Description = "Giyim ürünleri",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Giyim"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7127),
                            Description = "Kozmetik ürünler",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kozmetik"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7128),
                            Description = "Kitaplar",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kitap"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7130),
                            Description = "Hediyelik eşyalar",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Hediyelik Eşya"
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7280),
                            ImageUrl = "http://localhost:5050/images/products/product1.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Akıllı Telefon",
                            Price = 2999.99m,
                            Properties = "Son model akıllı telefon"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7287),
                            ImageUrl = "http://localhost:5050/images/products/product2.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Laptop",
                            Price = 4999.99m,
                            Properties = "Yüksek performanslı laptop"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7289),
                            ImageUrl = "http://localhost:5050/images/products/product3.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamera",
                            Price = 1999.99m,
                            Properties = "Yüksek çözünürlüklü kamera"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7291),
                            ImageUrl = "http://localhost:5050/images/products/product4.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tablet",
                            Price = 1999.99m,
                            Properties = "Taşınabilir tablet"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7293),
                            ImageUrl = "http://localhost:5050/images/products/product5.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bluetooth Hoparlör",
                            Price = 399.99m,
                            Properties = "Kablosuz hoparlör"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7295),
                            ImageUrl = "http://localhost:5050/images/products/product6.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Akıllı Saat",
                            Price = 799.99m,
                            Properties = "Akıllı saat"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7296),
                            ImageUrl = "http://localhost:5050/images/products/product7.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kulaklık",
                            Price = 299.99m,
                            Properties = "Kablosuz kulaklık"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7298),
                            ImageUrl = "http://localhost:5050/images/products/product8.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dizüstü Bilgisayar",
                            Price = 3499.99m,
                            Properties = "Hafif dizüstü bilgisayar"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7300),
                            ImageUrl = "http://localhost:5050/images/products/product9.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oyun Konsolu",
                            Price = 2499.99m,
                            Properties = "Yeni nesil oyun konsolu"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7302),
                            ImageUrl = "http://localhost:5050/images/products/product10.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Masaüstü Bilgisayar",
                            Price = 3999.99m,
                            Properties = "Güçlü masaüstü bilgisayar"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7304),
                            ImageUrl = "http://localhost:5050/images/products/product11.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yazıcı",
                            Price = 499.99m,
                            Properties = "Renkli yazıcı"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7305),
                            ImageUrl = "http://localhost:5050/images/products/product12.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tarayıcı",
                            Price = 299.99m,
                            Properties = "Doküman tarayıcı"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7307),
                            ImageUrl = "http://localhost:5050/images/products/product13.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Projeor",
                            Price = 1999.99m,
                            Properties = "Ev sinema sistemi için projektör"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7309),
                            ImageUrl = "http://localhost:5050/images/products/product14.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kamera Lens",
                            Price = 799.99m,
                            Properties = "Yüksek kaliteli lens"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7311),
                            ImageUrl = "http://localhost:5050/images/products/product15.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Aksiyon Kamerası",
                            Price = 1499.99m,
                            Properties = "Aksiyon çekimleri için kamera"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7312),
                            ImageUrl = "http://localhost:5050/images/products/product16.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Küçük Ev Aletleri",
                            Price = 299.99m,
                            Properties = "Küçük ev aletleri"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7314),
                            ImageUrl = "http://localhost:5050/images/products/product17.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mutfak Robotu",
                            Price = 899.99m,
                            Properties = "Mutfak robotu"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7316),
                            ImageUrl = "http://localhost:5050/images/products/product18.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blender",
                            Price = 199.99m,
                            Properties = "Blender"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7317),
                            ImageUrl = "http://localhost:5050/images/products/product19.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Mikser",
                            Price = 149.99m,
                            Properties = "Mikser"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7319),
                            ImageUrl = "http://localhost:5050/images/products/product20.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Fırın",
                            Price = 1999.99m,
                            Properties = "Dijital fırın"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7321),
                            ImageUrl = "http://localhost:5050/images/products/product21.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ruj",
                            Price = 49.99m,
                            Properties = "Kırmızı ruj"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7322),
                            ImageUrl = "http://localhost:5050/images/products/product22.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Parfüm",
                            Price = 199.99m,
                            Properties = "Kadın parfümü"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7324),
                            ImageUrl = "http://localhost:5050/images/products/product23.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Krem",
                            Price = 79.99m,
                            Properties = "Nemlendirici krem"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7326),
                            ImageUrl = "http://localhost:5050/images/products/product24.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Şampuan",
                            Price = 39.99m,
                            Properties = "Saç şampuanı"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7327),
                            ImageUrl = "http://localhost:5050/images/products/product25.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dudak Balmı",
                            Price = 19.99m,
                            Properties = "Nemlendirici dudak balmı"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7329),
                            ImageUrl = "http://localhost:5050/images/products/product26.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Makyaj Seti",
                            Price = 299.99m,
                            Properties = "Makyaj seti"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7331),
                            ImageUrl = "http://localhost:5050/images/products/product27.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Göz Farı",
                            Price = 59.99m,
                            Properties = "Göz farı"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7332),
                            ImageUrl = "http://localhost:5050/images/products/product28.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Oje",
                            Price = 29.99m,
                            Properties = "Renkli oje"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7334),
                            ImageUrl = "http://localhost:5050/images/products/product29.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cilt Bakım Seti",
                            Price = 199.99m,
                            Properties = "Cilt bakım seti"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7335),
                            ImageUrl = "http://localhost:5050/images/products/product30.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vücut Losyonu",
                            Price = 89.99m,
                            Properties = "Vücut losyonu"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7337),
                            ImageUrl = "http://localhost:5050/images/products/product31.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saç Spreyi",
                            Price = 39.99m,
                            Properties = "Saç spreyi"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7339),
                            ImageUrl = "http://localhost:5050/images/products/product32.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Makyaj Ayna",
                            Price = 49.99m,
                            Properties = "Makyaj aynası"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7340),
                            ImageUrl = "http://localhost:5050/images/products/product33.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tırnak Bakım Seti",
                            Price = 29.99m,
                            Properties = "Tırnak bakım seti"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7342),
                            ImageUrl = "http://localhost:5050/images/products/product34.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yüz Maskesi",
                            Price = 19.99m,
                            Properties = "Yüz maskesi"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7344),
                            ImageUrl = "http://localhost:5050/images/products/product35.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Göz Kremi",
                            Price = 59.99m,
                            Properties = "Göz kremi"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7345),
                            ImageUrl = "http://localhost:5050/images/products/product36.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dudak Peelingi",
                            Price = 29.99m,
                            Properties = "Dudak peelingi"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7347),
                            ImageUrl = "http://localhost:5050/images/products/product37.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Cilt Temizleme Jeli",
                            Price = 39.99m,
                            Properties = "Cilt temizleme jeli"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7348),
                            ImageUrl = "http://localhost:5050/images/products/product38.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Vücut Scrub'ı",
                            Price = 49.99m,
                            Properties = "Vücut scrub'ı"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7350),
                            ImageUrl = "http://localhost:5050/images/products/product39.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Saç Maskesi",
                            Price = 59.99m,
                            Properties = "Saç maskesi"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7351),
                            ImageUrl = "http://localhost:5050/images/products/product40.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Makyaj Fırçası",
                            Price = 19.99m,
                            Properties = "Makyaj fırçası"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7353),
                            ImageUrl = "http://localhost:5050/images/products/product41.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tişört",
                            Price = 99.99m,
                            Properties = "Pamuklu tişört"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7355),
                            ImageUrl = "http://localhost:5050/images/products/product42.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Pantolon",
                            Price = 149.99m,
                            Properties = "Şık pantolon"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7356),
                            ImageUrl = "http://localhost:5050/images/products/product43.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Elbise",
                            Price = 199.99m,
                            Properties = "Şık elbise"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7358),
                            ImageUrl = "http://localhost:5050/images/products/product44.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ceket",
                            Price = 299.99m,
                            Properties = "Şık ceket"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7359),
                            ImageUrl = "http://localhost:5050/images/products/product45.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Kaban",
                            Price = 399.99m,
                            Properties = "Kış kabanı"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7361),
                            ImageUrl = "http://localhost:5050/images/products/product46.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Roman",
                            Price = 39.99m,
                            Properties = "Roman"
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7362),
                            ImageUrl = "http://localhost:5050/images/products/product47.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Bilim Kurgu",
                            Price = 29.99m,
                            Properties = "Bilim kurgu kitabı"
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7364),
                            ImageUrl = "http://localhost:5050/images/products/product48.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tarih Kitabı",
                            Price = 34.99m,
                            Properties = "Tarih kitabı"
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7409),
                            ImageUrl = "http://localhost:5050/images/products/product49.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Çocuk Kitabı",
                            Price = 19.99m,
                            Properties = "Çocuklar için kitap"
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(2024, 12, 24, 7, 14, 54, 63, DateTimeKind.Utc).AddTicks(7412),
                            ImageUrl = "http://localhost:5050/images/products/product50.png",
                            IsActive = true,
                            ModifiedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Yemek Kitabı",
                            Price = 49.99m,
                            Properties = "Yemek tarifleri kitabı"
                        });
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 1,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 30,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 31,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 32,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 33,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 34,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 35,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 36,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 37,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 38,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 39,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 40,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 41,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 41,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 42,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 42,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 43,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 43,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 44,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 44,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 45,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 45,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 46,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 46,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 47,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 47,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 48,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 48,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 49,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 49,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 50,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 50,
                            CategoryId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Basket", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.BasketItem", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Basket", "Basket")
                        .WithMany()
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Order", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.OrderItem", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.ProductCategory", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ECommerce.Entity.Concrete.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("ECommerce.Entity.Concrete.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
